import sys
from optparse import OptionParser
import numpy as np
from pymoduleconnector import ModuleConnector
import time

__version__ = 2

def reset(device_name):
    from time import sleep
    mc = ModuleConnector(device_name)
    r = mc.get_xep()
    r.module_reset()
    mc.close()
    sleep(3)

def simple_xep_plot(device_name, bb = True):

    FPS = 10

    reset(device_name)
    mc = ModuleConnector(device_name)
    r = mc.get_xep()
    # Set DAC range
    r.x4driver_set_dac_min(900)
    r.x4driver_set_dac_max(1150)

    # Set integration
    r.x4driver_set_iterations(16)
    r.x4driver_set_pulses_per_step(26)

    defArray = np.array([1.86142378945 , 1.6786587107 , 1.04045376264 , 0.503215510643 , 0.364895257119 , 0.20301622591 , 0.0263429961387 , 0.0280699285166 , 0.0968596351778 , 0.105378295096 , 0.0832312195985 , 0.0536969121749 , 0.039457535159 , 0.0493615747885 , 0.0514446761456 , 0.038065126365 , 0.0279666289112 , 0.0260885234284 , 0.0164034295843 , 0.00252139131368 , 0.00356607908047 , 0.00521695806282 , 0.00681804931473 , 0.00744113147707 , 0.0102869515913 , 0.0131295793421 , 0.0149080404454 , 0.0155091213778 , 0.0141176130924 , 0.00682216987848 , 0.00490227021931 , 0.0110215347829 , 0.00768453169887 , 0.00240474301994 , 0.00749267606025 , 0.0100887467563 , 0.0116977550214 , 0.0100727204497 , 0.00368260981501 , 0.00128985378868 , 0.000611667369696 , 0.0027284004998 , 0.00757510695603 , 0.00942658265371 , 0.00598999435828 , 0.00603693545158 , 0.0106368869843 , 0.0093532822517 , 0.00475046613842 , 0.000638541939434 , 0.00558999309999 , 0.0088982998957 , 0.00850605274628 , 0.00604645841803 , 0.00862502369636 , 0.0132539732218 , 0.0138424687792 , 0.00914751730819 , 0.00879954053012 , 0.00713773977769 , 0.00334270705302 , 0.000933205972778 , 0.00620444078381 , 0.0114394236819 , 0.0133375999712 , 0.00902020699556 , 0.00403312013034 , 0.00613819245424 , 0.00888775951078 , 0.00730465207303 , 0.00823469890295 , 0.0135833121399 , 0.0139035806535 , 0.011257576417 , 0.0100029638884 , 0.00896064514344 , 0.00625420027514 , 0.00422498498488 , 0.00153150079281 , 0.00476488823639 , 0.00801366728864 , 0.00454868395963 , 0.00255948133302 , 0.00477917126178 , 0.0062351560003 , 0.00198318065198 , 0.00349098249702 , 0.00431445441418 , 0.00319088550187 , 0.00369342644439 , 0.00604670353973 , 0.00858593232274 , 0.00721351865285 , 0.00300215435059 , 0.000699960148359 , 0.000839542880096 , 0.00184619660264 , 0.00373482441458 , 0.00435557222703 , 0.00196583984881 , 0.00157657968605 , 0.00482289772753 , 0.00716680474843 , 0.00871457715632 , 0.00862615238734 , 0.00478770599229 , 0.00029094295516 , 0.00200849455581 , 0.00149137884471 , 0.00144404313575 , 0.00156917568167 , 0.00195241259304 , 0.00250870056776 , 0.00375654956695 , 0.00410247442188 , 0.00361393990315 , 0.00190951150372 , 0.00221165130674 , 0.006379164643 , 0.00748565269894 , 0.00680228809531 , 0.00582848641081 , 0.00406401383978 , 0.00250340058179 , 0.0025814261682 , 0.00349264502366 , 0.00354564342329 , 0.00347283198106 , 0.00357626803536 , 0.00487424921865 , 0.0039339078117 , 0.00193259948918 , 0.00118498771086 , 0.00103657834971 , 0.00108697487891 , 0.00182033076646 , 0.00267975628203 , 0.00286256122646 , 0.00239598061064 , 0.00173343138391 , 0.000796782857148 , 0.00290836674306 , 0.00317191300625 , 0.00221090186307 , 0.00245392104646 , 0.00233233587339 , 0.0022420421783 , 0.00259079321615 , 0.0024382888447 , 0.0016588414637 , 0.000810981527317 , 0.000321011418247 , 0.000252731402082 , 0.000369213562667 , 0.00100581240261 , 0.00164899631284 , 0.00189079862667 , 0.00191286115145 , 0.0021013669483 , 0.00310150801504 , 0.00324383900153 , 0.00215230627108 , 0.00137457909268 , 0.000591457129738 , 0.000754788289667 , 0.00153567835332 , 0.00118218568325 , 0.00130335185079 , 0.0020192693144 , 0.00146528350764 , 0.000164540691237 , 0.000244527953959 , 0.000266116054894 , 0.000633526603653 , 0.000574770193464 , 0.000501490932917 , 0.000202285463012 , 0.00129958702475 , 0.00142168793523 , 0.000547410548123 , 0.000664436864824 , 0.00190975594371 , 0.00249181324751 , 0.00265370909141 , 0.00205896957073 , 0.0016716774952 , 0.00299528621997 , 0.0144378845476])

    if bb:
        r.x4driver_set_downconversion(1)

    # Start streaming of data
    r.x4driver_set_fps(FPS)

    def clear_buffer():
        """Clears the frame buffer"""
        while r.peek_message_data_float():
            _=r.read_message_data_float()

    def read_frame():
        """Gets frame data from module"""
        d = r.read_message_data_float()
        frame = np.array(d.data)
         # Convert the resulting frame to a complex array if downconversion is enabled
        if bb:
            n=len(frame)
            frame = frame[:n/2] + 1j*frame[n/2:]

        return frame


    clear_buffer()

    absFrame = abs(read_frame())
    '''print "["
    for x in range(absFrame.shape[0]):
        print absFrame[x],
        print ",",

    print "]"'''
    

    for x in range(absFrame.shape[0]):
                absFrame[x] = absFrame[x]-defArray[x]
    maxVal = 0
    for y in range(5):
        if absFrame[y] > maxVal:
            maxVal = absFrame[y]

    if maxVal > 0.1:
        print "Foam"
    else:
        print "DeadEnd"

    # Stop streaming of data
    r.x4driver_set_fps(0)



def main():
    parser = OptionParser()
    parser.add_option(
        "-d",
        "--device",
        dest="device_name",
        help="device file to use",
        metavar="FILE")
    parser.add_option(
        "-b",
        "--baseband",
        action="store_true",
        default=True,
        dest="baseband",
        help="Enable baseband, rf data is default",
        metavar="FILE")


    (options, args) = parser.parse_args()

    if not options.device_name:
        print "you have to specify device, e.g.: python record.py -d /dev/ttyACM0"
        sys.exit(1)
    while(True):
        simple_xep_plot(options.device_name, bb = options.baseband)
        time.sleep(1.5)

if __name__ == "__main__":
    main()


